require('dotenv').config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, webhookCallback } = require('grammy');
const { MongoClient } = require('mongodb');

const uri = process.env.URI_DB;
const client = new MongoClient(uri, {});
const db = client.db('tg');
const collection = db.collection('users');

async function connectToMongoDB() {
	try {
		await client.connect();
		console.log('Connected to the database');
	} catch (error) {
		console.error('Error connecting to the database', error);
	}
}

connectToMongoDB()

const bot = new Bot(process.env.BOT_API_KEY);

const activeUsers = new Set()

bot.api.setMyCommands([{
	command: 'start', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
},
{
	command: 'catalog', description: '–ü—Ä–æ–¥–∞—Ç—å –≤–∏—Ä—Ç—ã',
},
{
	command: 'profile', description: '–ü—Ä–æ—Ñ–∏–ª—å',
},
{
	command: 'help', description: '–ü–æ–º–æ—â—å',
},
{
	command: 'about', description: '–û –ø—Ä–æ–µ–∫—Ç–µ',
}
])

bot.command('about', async (ctx) => {
	await ctx.reply(`–ù–∞—à –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É p2p (–æ—Ç –∞–Ω–≥–ª. Peer-to-Peer ‚Äî –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ —á–µ–ª–æ–≤–µ–∫—É) –ø–æ–∫—É–ø–∫–∏ - –ø—Ä–æ–¥–∞–∂–∏ –≤–∏—Ä—Ç–æ–≤. –ë–æ—Ç –∏—â–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @virtlord –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏. 
 
–°—Ç–æ—Ä–æ–Ω—ã:
1. –ü—Ä–æ–¥–∞–≤–µ—Ü (–ø–æ—Å—Ç–∞–≤—â–∏–∫) - –ª–∏—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–µ—Ç n –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤ –∏ –∂–µ–ª–∞–µ—Ç –∏—Ö –ø—Ä–æ–¥–∞—Ç—å. –ò–º –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª—é–±–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ GTA5RP.
2. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å - –ª–∏—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞—Ö GTA5RP.
3. –ú–µ–Ω–µ–¥–∂–µ—Ä - –ª–∏—Ü–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —á—å–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∏—Ç: –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –≤—ã–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.

 –ü—Ä–æ—Ü–µ—Å—Å —Å–¥–µ–ª–∫–∏:
1. –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–æ–æ–±—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –Ω–∞–ª–∏—á–∏–∏ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã.
2. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.
3. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.
4. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑.
5. –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ö–æ–¥—è –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–Ω–ª–∞–π–Ω–µ –∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –Ω–∏–º.
6. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –¥–∞–≤–∞—è –∏–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–ø–æ—Å–æ–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã.
7. –ü—Ä–æ–¥–∞–≤–µ—Ü, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
8. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
9. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –≤—ã–ø–ª–∞—Ç—É –ø—Ä–æ–¥–∞–≤—Ü—É.

 –°–ø–æ—Å–æ–±–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏—Ä—Ç–æ–≤ –æ–≥—Ä–æ–º–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω –∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫. –ü—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–Ω–∞–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–æ—Å—Ç—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–∞–∫–∏–º–∏ –∫–∞–∫: –∞–≤—Ç–æ, –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –±–∞–Ω–∫—É, –ø—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∏ —Ç.–¥. –†–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∏—Ö –Ω–∞ –±–æ–ª—å—à—É—é –ø—É–±–ª–∏–∫—É –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`)
})

bot.command('help', async (ctx) => {
	await ctx.reply(`‚å®Ô∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/catalog- –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
/profile- –ü—Ä–æ—Ñ–∏–ª—å

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –ú–µ–Ω–µ–¥–∂–µ—Ä—É: @virtlord`)
})

const profileKeyboard = new Keyboard().text('–í—ã–≤–µ—Å—Ç–∏').row().resized()

bot.command('profile', async (ctx) => {
	await ctx.reply(`	–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ${ctx.update.message.from.username}

ü™™ –ù–∏–∫–Ω–µ–π–º: @${ctx.update.message.from.username}
‚öôÔ∏è –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
üÜî ID: ${ctx.update.message.from.id}
üí≤ –ë–∞–ª–∞–Ω—Å: 0`, {
		reply_markup: profileKeyboard
	})
})


bot.callbackQuery(['topup_1', 'topup_2', 'topup_3'], async ctx => {
	await bot.api.sendMessage(5741558358, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ (${ctx.update.callback_query.from.id} - ${ctx.update.callback_query.from.username}):\n–î–ï–ü–ù–£–¢–¨ –•–û–¢–Ø–¢`);
	await ctx.answerCallbackQuery(`–°–µ–π—á–∞—Å —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø—Ä—è–º —Ç—É—Ç - –æ–∂–∏–¥–∞–π—Ç–µ.`);
	await ctx.reply('–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –°–µ–π—á–∞—Å —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è - –æ–∂–∏–¥–∞–π—Ç–µ.')

});

bot.hears('–í—ã–≤–µ—Å—Ç–∏', async (ctx) => {
	await ctx.reply('–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 50‚ÇΩ', {
		reply_markup: { remove_keyboard: true }
	})
})

bot.command('start', async (ctx) => {
	const array = await collection.distinct('ids')
	array.forEach(item => {
		if (Array.isArray(item)) {
			item.forEach(subItem => {
				if (typeof subItem === 'number') {
					activeUsers.add(subItem);
				}
			});
		} else if (typeof item === 'number') {
			activeUsers.add(item);
		}
	});
	activeUsers.add(ctx.chat.id)
	await collection.updateMany(
		{},
		{ $set: { "ids": Array.from(activeUsers) } }

	)
	const startKeyboard = new InlineKeyboard().text('–ü—Ä–æ—Ñ–∏–ª—å', 'profile-keyboard').row().text('–ü—Ä–æ–¥–∞—Ç—å –≤–∏—Ä—Ç—ã', 'catalog-keyboard').row().text('–ü—Ä–æ–¥–∞—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ', 'catalogI-keyboard').row().text('–ü–æ–º–æ—â—å', 'help-keyboard').row().text('–û –ø—Ä–æ–µ–∫—Ç–µ', 'about-keyboard')
	await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –≤–∏—Ä—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ Majestic RP. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–¥–∞—Ç—å –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –ø–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π —Ü–µ–Ω–µ, –∞ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!

–ú–µ–Ω–µ–¥–∂–µ—Ä: @virtlord`, { reply_markup: startKeyboard });
	await bot.api.sendMessage(5741558358, `–ó–∞—à–µ–ª (${ctx.update.message.from.id} - ${ctx.update.message.from.username})`);
});

bot.callbackQuery("profile-keyboard", async (ctx) => {
	await ctx.answerCallbackQuery();
	await ctx.reply(`–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ${ctx.update.callback_query.from.username}

ü™™ –ù–∏–∫–Ω–µ–π–º: @${ctx.update.callback_query.from.username}
‚öôÔ∏è –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
üÜî ID: ${ctx.update.callback_query.from.id}
üí≤ –ë–∞–ª–∞–Ω—Å: 0`, { reply_markup: profileKeyboard })
});

bot.callbackQuery("help-keyboard", async (ctx) => {
	await ctx.answerCallbackQuery();
	await ctx.reply(`‚å®Ô∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/catalog- –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
/profile- –ü—Ä–æ—Ñ–∏–ª—å

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ –ú–µ–Ω–µ–¥–∂–µ—Ä—É: @virtlord`)
});

bot.callbackQuery("about-keyboard", async (ctx) => {
	await ctx.answerCallbackQuery();
	await ctx.reply(`–ù–∞—à –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É p2p (–æ—Ç –∞–Ω–≥–ª. Peer-to-Peer ‚Äî –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ —á–µ–ª–æ–≤–µ–∫—É) –ø–æ–∫—É–ø–∫–∏ - –ø—Ä–æ–¥–∞–∂–∏ –≤–∏—Ä—Ç–æ–≤. –ë–æ—Ç –∏—â–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @virtlord –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏. 
 
–°—Ç–æ—Ä–æ–Ω—ã:
1. –ü—Ä–æ–¥–∞–≤–µ—Ü (–ø–æ—Å—Ç–∞–≤—â–∏–∫) - –ª–∏—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–µ—Ç n –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤ –∏ –∂–µ–ª–∞–µ—Ç –∏—Ö –ø—Ä–æ–¥–∞—Ç—å. –ò–º –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª—é–±–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ GTA5RP.
2. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å - –ª–∏—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞—Ö GTA5RP.
3. –ú–µ–Ω–µ–¥–∂–µ—Ä - –ª–∏—Ü–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —á—å–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∏—Ç: –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞, –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –≤—ã–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.

 –ü—Ä–æ—Ü–µ—Å—Å —Å–¥–µ–ª–∫–∏:
1. –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–æ–æ–±—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –Ω–∞–ª–∏—á–∏–∏ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã.
2. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.
3. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.
4. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑.
5. –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ö–æ–¥—è –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–Ω–ª–∞–π–Ω–µ –∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –Ω–∏–º.
6. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –¥–∞–≤–∞—è –∏–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–ø–æ—Å–æ–±—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã.
7. –ü—Ä–æ–¥–∞–≤–µ—Ü, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
8. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
9. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –≤—ã–ø–ª–∞—Ç—É –ø—Ä–æ–¥–∞–≤—Ü—É.

 –°–ø–æ—Å–æ–±–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤–∏—Ä—Ç–æ–≤ –æ–≥—Ä–æ–º–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω –∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ –∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫. –ü—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–Ω–∞–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–æ—Å—Ç—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–∞–∫–∏–º–∏ –∫–∞–∫: –∞–≤—Ç–æ, –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –±–∞–Ω–∫—É, –ø—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∏ —Ç.–¥. –†–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∏—Ö –Ω–∞ –±–æ–ª—å—à—É—é –ø—É–±–ª–∏–∫—É –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`)
});

const catalogItems = [
	{ name: '1 - New York', quantity: '34–∫–∫', price: 450 },
	{ name: '2 - Detroit', quantity: '12–∫–∫', price: 600 },
	{ name: '3 - Chicago', quantity: '7–∫–∫', price: 400 },
	{ name: '4 - San Francisco', quantity: '9–∫–∫', price: 550 },
	{ name: '5 - Atlanta', quantity: '29–∫–∫', price: 500 },
	{ name: '6 - San Diego', quantity: '3–∫–∫', price: 400 },
	{ name: '7 - Los Angeles', quantity: '22–∫–∫', price: 500 },
	{ name: '8 - Miami', quantity: '23–∫–∫', price: 450 },
	{ name: '9 - Las Vegas', quantity: '47–∫–∫', price: 500 },
	{ name: '10 - Washington', quantity: '5–∫–∫', price: 600 },
	{ name: '11 - Dallas', quantity: '5–∫–∫', price: 1000 }
];

bot.command('catalog', async ctx => {
	const keyboard = {
		inline_keyboard: catalogItems.map(item => [{
			text: `${item.name}`,
			callback_data: `details_${item.name}_${item.quantity}_${item.price}`
		}])
	};

	await ctx.reply('–°–µ—Ä–≤–µ—Ä–∞ Majestic:', {
		reply_markup: JSON.stringify(keyboard)
	});
});

catalogItems.forEach(item => {
	bot.callbackQuery(`details_${item.name}_${item.quantity}_${item.price}`, async ctx => {
		const detailsKeyboard = {
			inline_keyboard: [
				[{ text: `–¶–µ–Ω–∞ –∑–∞ 1–∫–∫: ${item.price}‚ÇΩ`, callback_data: 'dummy' }],
				[
					{ text: '–ü—Ä–æ–¥–∞—Ç—å', callback_data: `sell_${item.name}` }
				]
			]
		};

		await ctx.editMessageText(`${item.name}`, {
			reply_markup: JSON.stringify(detailsKeyboard)
		});
	});

	bot.callbackQuery(`buy_${item.name}`, async ctx => {
		await bot.api.sendMessage(5741558358, `(${ctx.update.callback_query.from.id} - ${ctx.update.callback_query.from.username}):\n–ö–£–ü–ò–¢–¨ –•–û–¢–Ø–¢ ${item.name}`);
		await ctx.answerCallbackQuery(`
		–°–µ–π—á–∞—Å —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø—Ä—è–º —Ç—É—Ç - –æ–∂–∏–¥–∞–π—Ç–µ.
		`);
		await ctx.reply('–°–µ–π—á–∞—Å —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø—Ä—è–º —Ç—É—Ç - –æ–∂–∏–¥–∞–π—Ç–µ.')
	});

	bot.callbackQuery(`sell_${item.name}`, async ctx => {
		await bot.api.sendMessage(5741558358, `(${ctx.update.callback_query.from.id} - ${ctx.update.callback_query.from.username}):\n–ü–†–û–î–ê–¢–¨ –•–û–¢–Ø–¢ ${item.name}`);
		await ctx.answerCallbackQuery(`–°–µ–π—á–∞—Å —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø—Ä—è–º —Ç—É—Ç - –æ–∂–∏–¥–∞–π—Ç–µ.`);
		await ctx.reply('–°–µ–π—á–∞—Å —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø—Ä—è–º —Ç—É—Ç - –æ–∂–∏–¥–∞–π—Ç–µ.')
	});
});

bot.callbackQuery('catalog-keyboard', async (ctx) => {
	await ctx.answerCallbackQuery();
	const keyboard = {
		inline_keyboard: catalogItems.map(item => [{
			text: `${item.name}`,
			callback_data: `details_${item.name}_${item.quantity}_${item.price}`
		}])
	};
	await bot.api.sendMessage(5741558358, `–•–æ—Ç—è—Ç –ø—Ä–æ–¥–∞—Ç—å –≤–∏—Ä—Ç—ã (${ctx.from.id} - ${ctx.from.username})`);
	await ctx.reply('–°–µ—Ä–≤–µ—Ä–∞ Majestic:', {
		reply_markup: JSON.stringify(keyboard)
	});

})

bot.callbackQuery('catalogI-keyboard', async (ctx) => {
	await ctx.answerCallbackQuery();
	const keyboard = {
		inline_keyboard: catalogItems.map(item => [{
			text: `${item.name}`,
			callback_data: `details_${item.name}_${item.quantity}_${item.price}`
		}])
	};

	await bot.api.sendMessage(5741558358, `–•–æ—Ç—è—Ç –ø—Ä–æ–¥–∞—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ (${ctx.from.id} - ${ctx.from.username})`);
	await ctx.reply('–°–µ—Ä–≤–µ—Ä–∞ Majestic:', {
		reply_markup: JSON.stringify(keyboard)
	});

})

bot.command('users', async ctx => {
	if (ctx.chat.id !== 5741558358) {
		return;
	}
	const usersArray = await collection.distinct('ids');
	await ctx.reply(`–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersArray.join(', ')}`);
});

bot.command('send', async ctx => {
	if (ctx.chat.id !== 5741558358) {
		return;
	}
	const usersArray = await collection.distinct('ids');
	await sendToManyUsers('–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –ò–¥—É—Ç —Å–∫–∏–¥–∫–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ 10%, –ø–∏—Å–∞—Ç—å @virtlord', usersArray)
});

async function sendToManyUsers(text, arr) {
	try {
		for (const userID of arr) {
			await bot.api.sendMessage(userID, text);
			bot.api.sendMessage(5741558358, `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ ${userID}`);
		}
		bot.api.sendMessage(5741558358, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–Ω–æ–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');
	} catch (error) {
		if (error.description === 'Forbidden: bot was blocked by the user') {
			bot.api.sendMessage(5741558358, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω - ${error.payload.chat_id}`);
			let array = await collection.distinct('ids')
			activeUsers.clear()
			array = array.map(u => {
				if (u !== error.payload.chat_id) {
					return u;
				}
				return;
			})
			array.forEach(item => {
				if (Array.isArray(item)) {
					item.forEach(subItem => {
						if (typeof subItem === 'number') {
							activeUsers.add(subItem);
						}
					});
				} else if (typeof item === 'number') {
					activeUsers.add(item);
				}
			});
			await collection.updateMany(
				{},
				{ $set: { "ids": Array.from(activeUsers) } }

			)
		}
		if (error.description === 'Bad Request: chat not found') {
			bot.api.sendMessage(5741558358, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω - ${error.payload.chat_id}`);
			let array = await collection.distinct('ids')
			activeUsers.clear()
			array = array.map(u => {
				if (u !== error.payload.chat_id) {
					return u;
				}
				return;
			})
			array.forEach(item => {
				if (Array.isArray(item)) {
					item.forEach(subItem => {
						if (typeof subItem === 'number') {
							activeUsers.add(subItem);
						}
					});
				} else if (typeof item === 'number') {
					activeUsers.add(item);
				}
			});
			await collection.updateMany(
				{},
				{ $set: { "ids": Array.from(activeUsers) } }

			)
		}
		bot.api.sendMessage(5741558358, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–Ω–æ–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:, ${error} –≤ ${error.payload.chat_id}`);
	}
}

bot.on('message:photo', async (ctx) => {
	const photoPhiles = ctx.message.photo;
	
	if (!photoPhiles) {
		await ctx.reply('–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ!');
		return;
	}

	const photoFile = photoPhiles[photoPhiles.length - 1];
	const fileId = photoFile.file_id;
	const caption = ctx.message.caption || '';

	if (5741558358 !== ctx.update.message.from.id) {
		await ctx.api.sendPhoto(5741558358, fileId, { caption: caption });
		await bot.api.sendMessage(5741558358, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ (${ctx.update.message.from.id} - ${ctx.update.message.from.username})`);
	} else {
		const replyUser = +ctx.message.reply_to_message?.text.match(/\d+/).join();
		
		if (replyUser) {
			await ctx.api.sendPhoto(replyUser, fileId, { caption: caption });
		}

	}
})

bot.on('message:voice', async (ctx) => {
	const voiceFile = ctx.message.voice;
	const fileId = voiceFile.file_id;

	if (5741558358 !== ctx.update.message.from.id) {
		await ctx.api.sendVoice(5741558358, fileId);
		await ctx.api.sendMessage(5741558358, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ (${ctx.update.message.from.id} - ${ctx.update.message.from.username})`);
	} else {
		const replyUser = +ctx.message.reply_to_message?.text.match(/\d+/).join()
		
		if (replyUser)
			await ctx.api.sendVoice(replyUser, fileId)
	}	
	
})

bot.on('message', async (ctx) => {
	
	if (5741558358 !== ctx.update.message.from.id) {
		await bot.api.sendMessage(5741558358, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ (${ctx.update.message.from.id} - ${ctx.update.message.from.username}):\n${ctx.update.message.text}`);
	} else {
		const replyUser = +ctx.message.reply_to_message?.text.match(/\d+/).join()
		
		if (replyUser) {
			await bot.api.sendMessage(replyUser, ctx.update.message.text);
		}
	}
})

bot.catch((err) => {
	const ctx = err.ctx;
	console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}`);
	const e = err.error;

	if (e instanceof GrammyError) {
		bot.api.sendMessage(5741558358, `${e.description}`);
		console.error(`–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${e.description}`);
	} else if (e instanceof HttpError) {
		console.error(`–û—à–∏–±–∫–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º ${e}`);
	} else {
		console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ${e}`);
	}
});

module.exports = webhookCallback(bot, 'http');

bot.start();